/**
 * @param {string} s
 * @return {number}
 */
var longestValidParentheses = function (s) {
  if (!s.length) return 0
  // 动态规划
  // dp[i] 长度为i字符串的最长有效括号长度为dp[i]
  // dp[i] 将表示在字符串中以索引 i 结束的最长有效括号子串的长度。
  let dp = new Array(s.length).fill(0)
  console.log(dp, "ddd")
  // 遍历字符串：从索引 1 开始（因为单个字符不能形成有效的括号对）遍历给定的字符串。
  // 如果s[i]是')',  前一个如果是'('  那么 dp[i] = dp[i - 2] + 2； 使用dp[i -2] 的意思是 前一个'(' 应该与当前的右括号 匹配，而dp[i -2] 代表着 之前的最长长度 所以要加2  （（））
  for (let i = 1; i < s.length; i++) {
    if (s[i] === ")") {
      if (s[i - 1] === "(") {
        dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2
        console.log(dp, "aaa")
        // 如果前一个不是左括号，那么就是指 前一个值也是右括号 那么需要找到这个右括号所对应的左括号在什么位置
        // 计算方法是 i - dp[i-1] - 1    i是当前的索引， dp[i -1] 是指前一个字符所对应的最长有效字符串长度 i - dp[i - 1] 就得到了前一个字符右括号对应的最左边的左括号 那么再减1 就得到了 当前s[i]这个右括号 所对应的左括号的位置 来判断这个位置的字符 是不是左括号
        // 同时要保证 前一个字符 一定是一个最长的有效字符长度
        // (i - dp[i -1] > 0 代表去掉前面的有效括号字符长度  前面还有字符
        // 其实就是为了预防这个情况  ())
        // 此时计算到 2的时候 前面2 -d[1] = 0, 此时前面已经没有字符了，所以最终结果就是dp[1] = 2
      } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] === "(") {
        // 如果前面的字符 超过或者等于2个  则需要加上前面的有效括号字符的长度 也就是dp[i - dp[i-1] - 2]  减去2 是因为i - dp[i -1] - 1 是当前右括号所对应的左括号的索引 需要再减去1 才能拿到 前面那个字符的索引
        // 如果前面的字符 不超过2个 也就1个 那么就不需要加
        dp[i] = dp[i - 1] + 2 + (i - dp[i - 1] >= 2 ? dp[i - dp[i - 1] - 2] : 0)
      }
    }
  }
  console.log(dp, "dp")
  return Math.max(...dp)
}

console.log(longestValidParentheses("()"))
